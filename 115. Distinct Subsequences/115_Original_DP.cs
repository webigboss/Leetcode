public class Solution {
    public int NumDistinct(string s, string t) {
        var dp = new int[s.Length + 1, t.Length + 1];
        //base case is s[0, j] = 0 and s[i, 0] = 0; since default int is 0, so no need to set value;
        
        //example case:
        // ╔═══════════════════════════════════╗
        // ║        s="babgbag", t="bag"       ║
        // ╠═══╦═══╦═══╦═══╦═══╦═══╦═══╦═══╦═══╣
        // ║   ║   ║ 1 ║ 2 ║ 3 ║ 4 ║ 5 ║ 6 ║ 7 ║
        // ║═══╠═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╣
        // ║j\i║ 0 ║ b ║ a ║ b ║ g ║ b ║ a ║ g ║
        // ╠═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╣
        // ║ 0 ║ 0 ║ 0 ║ 0 ║ 0 ║ 0 ║ 0 ║ 0 ║ 0 ║
        // ╠═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╣
        // ║ b ║ 0 ║ 1 ║ 1 ║ 2 ║ 2 ║ 3 ║ 3 ║ 3 ║
        // ╠═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╣
        // ║ a ║ 0 ║ 0 ║ 1 ║ 1 ║ 1 ║ 1 ║ 4 ║ 4 ║
        // ╠═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╣
        // ║ g ║ 0 ║ 0 ║ 0 ║ 0 ║ 1 ║ 1 ║ 1 ║ 5 ║
        // ╚═══╩═══╩═══╩═══╩═══╩═══╩═══╩═══╩═══╝
        //
        // optimal solution is make dp[i, 0] = 1, so as to skip the logic for checking j == 1
                //example case:
        // ╔═══════════════════════════════════╗
        // ║        s="babgbag", t="bag"       ║
        // ╠═══╦═══╦═══╦═══╦═══╦═══╦═══╦═══╦═══╣
        // ║   ║   ║ 1 ║ 2 ║ 3 ║ 4 ║ 5 ║ 6 ║ 7 ║
        // ║═══╠═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╣
        // ║j\i║ 0 ║ b ║ a ║ b ║ g ║ b ║ a ║ g ║
        // ╠═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╣
        // ║ 0 ║ 0 ║ 1 ║ 1 ║ 1 ║ 1 ║ 1 ║ 1 ║ 1 ║
        // ╠═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╣
        // ║ b ║ 0 ║ 1 ║ 1 ║ 2 ║ 2 ║ 3 ║ 3 ║ 3 ║
        // ╠═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╣
        // ║ a ║ 0 ║ 0 ║ 1 ║ 1 ║ 1 ║ 1 ║ 4 ║ 4 ║
        // ╠═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╬═══╣
        // ║ g ║ 0 ║ 0 ║ 0 ║ 0 ║ 1 ║ 1 ║ 1 ║ 5 ║
        // ╚═══╩═══╩═══╩═══╩═══╩═══╩═══╩═══╩═══╝
        
        for(var i = 1; i <= s.Length; i++){
            for(var j = 1; j <= t.Length; j++){
                if(s[i - 1] == t[j - 1]){
                    if(j == 1)
                        dp[i, j] = dp[i - 1, j] + 1;
                    else
                        dp[i, j] = dp[i - 1, j - 1] + dp[i - 1, j];
                }
                else
                    dp[i, j] = dp[i - 1, j];                    
            }
        }
        
        return dp[s.Length, t.Length];
    }
}